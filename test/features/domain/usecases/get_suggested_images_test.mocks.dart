// Mocks generated by Mockito 5.0.16 from annotations
// in stock_viewer/test/features/domain/usecases/get_suggested_images_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:stock_viewer/features/image/domain/entities/sv_image.dart'
    as _i4;
import 'package:stock_viewer/features/image/domain/repositories/image_repository.dart'
    as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [ImageRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageRepository extends _i1.Mock implements _i2.ImageRepository {
  MockImageRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.SVImage>> getSearchedImages(String? searchterm) =>
      (super.noSuchMethod(Invocation.method(#getSearchedImages, [searchterm]),
              returnValue: Future<List<_i4.SVImage>>.value(<_i4.SVImage>[]))
          as _i3.Future<List<_i4.SVImage>>);
  @override
  _i3.Future<List<_i4.SVImage>> getSuggestedImages() =>
      (super.noSuchMethod(Invocation.method(#getSuggestedImages, []),
              returnValue: Future<List<_i4.SVImage>>.value(<_i4.SVImage>[]))
          as _i3.Future<List<_i4.SVImage>>);
  @override
  String toString() => super.toString();
}
